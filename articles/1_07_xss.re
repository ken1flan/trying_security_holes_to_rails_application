
= クロスサイトスクリプティング


//image[trap][][scale=0.5]{
//}




ここでは利用者に提供する便利な機能の説明、それを悪用した攻撃とそのメカニズムを説明したあと、直し方について検討します。


== ユーザに好きな計測タグを

=== タグの登録


このアプリケーションは登録したユーザがブログをするためのものです。
ブログを公開したら、当然、どれくらい見られたのか気になることでしょう。
ですので、ユーザがGoogle Analyticsなどのタグを設置できるようになっています。



ログインした状態でユーザ名をクリックすると、ドロップダウンリストが表示されます。
その中にある@<tt>{Meadurement tag}というリンクをクリックすると、計測タグの編集画面が表示されます。



//image[meadurement_tag][計測タグ編集][scale=0.8]{
//}




ここでタグを記入して保存すると、ブログの各ページに貼られます。


=== ブログ


準備のところで書いたブログをみましょう。
画面右上のアカウント名のドロップダウンをクリックし、@<tt>{My blogs}のリンクから辿ると早いです。



//image[my_blog][My blogsから辿ると早い][scale=0.8]{
//}




Chromeの開発者ツールなどでソースを見てみると、先程入れたタグがページに埋め込まれていることが確認できます。



//image[displayed_tag][My blogsから辿ると早い][scale=0.8]{
//}




これでGoogle Analyticsから、自分のブログがどれくらい見られているか確認できます。便利ですね。


== 被害にあってみよう


ブログ一覧から、@<tt>{javascript injection}さんのブログを探して、開いてみてください。



http://localhost:3000/blogs



//image[blogs][ブログ一覧][scale=0.8]{
//}




ブログを読むために詳細ページを開くと…。
セッションIDが表示されています。



//image[displayed_session_id][セッションIDが表示されてる！][scale=0.8]{
//}




Javascriptは自サイトのクッキーに自由にアクセスできるので、このようなこともできるのです。
これを表示などせずに、外部へこっそり送ったとしたらどうなるでしょうか…？


== どうなってるの？


原因は @<tt>{app/views/blogs/show.html.erb} で @<tt>{raw} を使って、計測タグを配置しているからです。
これによってエスケープされないテキストの描画をさせています。


//emlist[][erb]{
<%= raw @blog.user.measurement_tag&.body %>
//}


多くのユーザはおそらく計測タグを素直に入力すると思われますが、世の中にはごく少数ですが、こういったところに悪意のあるJavascriptを設置するひとがいます。


== 直し方


計測タグなどを入れたい場合には、サービス側で雛形を提供し、そこに埋め込む変数のみユーザに入力してもらうのがよさそうです。

